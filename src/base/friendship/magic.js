wrap(() => {
  const setting = settings.register({
    name: 'Disable friendship notification',
    key: 'underscript.disable.friendship.notification',
  });

  const max = 200 / 5; // Limit level 200

  function getFriendship() {
    if (setting.value()) return;
    axios.get('/FriendshipConfig').then((resp) => {
      const items = JSON.parse(resp.data.friendshipItems)
        .filter((item) => {
          const lvl = getLevel(item.xp);
          return lvl > 0 && item.claim < Math.min(Math.floor(lvl / 5), max);
        }).map((item) => $.i18n(`card-name-${item.idCard}`, 1));

      if (!items.length) return;

      fn.toast({
        title: 'Pending Friendship Rewards',
        text: `- ${items.join('\n- ')}`,
        className: 'dismissable',
        buttons: {
          text: 'Go now!',
          className: 'dismiss',
          css: {
            border: '',
            height: '',
            background: '',
            'font-size': '',
            margin: '',
            'border-radius': '',
          },
          onclick: (e) => {
            location.href = '/Friendship';
          },
        },
      });
    });
  }

  eventManager.on('getVictory getDefeat', getFriendship);

  const levels = [
    1000, 2025, 3075, 4150, 5250, 6375, 7525, 8700, 9900, 11125,
    12375, 13650, 14950, 16275, 17625, 19000, 20400, 21825, 23275, 24750,
    26250, 27775, 29325, 30900, 32500, 34125, 35775, 37450, 39150, 40875,
    42625, 44400, 46200, 48025, 49875, 51750, 53650, 55575, 57525, 59500,
    61500, 63525, 65575, 67650, 69750, 71875, 74025, 76200, 78400, 80625,
    82875, 85150, 87450, 89775, 92125, 94500, 96900, 99325, 101775, 104250,
    106750, 109275, 111825, 114400, 117000, 119625, 122275, 124950, 127650, 130375,
    133125, 135900, 138700, 141525, 144375, 147250, 150150, 153075, 156025, 159000,
    162000, 165025, 168075, 171150, 174250, 177375, 180525, 183700, 186900, 190125,
    193375, 196650, 199950, 203275, 206625, 210000, 213400, 216825, 220275, 223750, // 100
    227250, 230775, 234325, 237900, 241500, 245125, 248775, 252450, 256150, 259875,
    263625, 267400, 271200, 275025, 278875, 282750, 286650, 290575, 294525, 298500,
    302500, 306525, 310575, 314650, 318750, 322875, 327025, 331200, 335400, 339625,
    343875, 348150, 352450, 356775, 361125, 365500, 369900, 374325, 378775, 383250,
    387750, 392275, 396825, 401400, 406000, 410625, 415275, 419950, 424650, 429375,
    434125, 438900, 443700, 448525, 453375, 458250, 463150, 468075, 473025, 478000,
    483000, 488025, 493075, 498150, 503250, 508375, 513525, 518700, 523900, 529125,
    534375, 539650, 544950, 550275, 555625, 561000, 566400, 571825, 577275, 582750,
    588250, 593775, 599325, 604900, 610500, 616125, 621775, 627450, 633150, 638875,
    644625, 650400, 656200, 662025, 667875, 673750, 679650, 685575, 691525, 697500, // 200
    703500, 709525, 715575, 721650, 727750, 733875, 740025, 746200, 752400, 758625,
    // 764875, 771150, 777450, 783775, 790125, 796500, 802900, 809325, 815775, 822250,
    // 828750, 835275, 841825, 848400, 855000, 861625, 868275, 874950, 881650, 888375,
    // 895125, 901900, 908700, 915525, 922375, 929250, 936150, 943075, 950025, 957000,
    // 964000, 971025, 978075, 985150, 992250, 999375, 1006525, 1013700, 1020900, 1028125,
    // 1035375, 1042650, 1049950, 1057275, 1064625, 1072000, 1079400, 1086825, 1094275, 1101750,
    // 1109250, 1116775, 1124325, 1131900, 1139500, 1147125, 1154775, 1162450, 1170150, 1177875,
    // 1185625, 1193400, 1201200, 1209025, 1216875, 1224750, 1232650, 1240575, 1248525, 1256500,
    // 1264500, 1272525, 1280575, 1288650, 1296750, 1304875, 1313025, 1321200, 1329400, 1337625,
    // 1345875, 1354150, 1362450, 1370775, 1379125, 1387500, 1395900, 1404325, 1412775, 1421250, // 300
  ];

  function getLevel(xp) {
    return levels.findIndex((i) => i > xp) + 1;
  }

  /*
  function getExperience(level) {
    let exp = 0;
    for (temp = 0; temp < level; temp++) {
      exp += 1000 + 25 * temp;
    }
    return exp;
  }
  */
});
